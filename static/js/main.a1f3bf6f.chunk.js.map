{"version":3,"sources":["logo.svg","store/index.ts","page/qy/processApp/A.tsx","page/qy/noticApp/B.tsx","page/wx/Midea.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Store","createStore","state","action","type","a","b","c","console","log","getState","TA","id","name","useRouteMatch","A","useState","setType","setId","useEffect","to","className","onClick","InfoContext","React","createContext","B","path","params","Provider","value","active","component","Apage","Midea","autoPlay","setAutoPlay","audio","video","facingMode","wConstraints","window","document","getElementById","navigator","mediaDevices","getUserMedia","then","stream","srcObject","catch","error","alert","width","height","App","userId","setUserId","logo","store","exact","Apgae","Bpgae","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a1f3bf6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createStore } from 'redux'\r\n\r\nfunction loadingReducer(state = 0, action: { type: any }):any {\r\n  const { type } = action\r\n  switch (type) {\r\n    case 'OPEN':\r\n      return ++state\r\n    case 'CLOSE':\r\n      return --state\r\n    default:\r\n      // return state\r\n      return {\r\n        a:state,\r\n        b:12321,\r\n        c:'heheh'\r\n      }\r\n  }\r\n}\r\nconst Store = createStore(loadingReducer);\r\n\r\nexport const State = ():any =>{\r\n  return Store.getState();\r\n}\r\n\r\nexport default Store\r\n\r\n\r\n","// import React, { useState, useEffect, useRef, useCallback, ReactText } from 'react'\r\nimport React, { useState, useEffect } from 'react'\r\n// import { Link, useHistory } from \"react-router-dom\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport { State } from '../../../store';\r\n\r\nconsole.log('State',State())\r\n\r\nconst TA: React.FC<{ id: Number, name: String }> = ({ id, name }) => {\r\n    console.log('1212',useRouteMatch())\r\n    return (\r\n        <>\r\n            <div>{id}</div>\r\n            <div>{name}</div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst A: React.FC = () => {\r\n    console.log('1313',useRouteMatch())\r\n    // 状态管理\r\n    const [type, setType] = useState(1)\r\n    const [id, setId] = useState('008')\r\n\r\n    // 状态变化执行 aa\r\n    // id变化执行 aa\r\n    useEffect(() => {\r\n        console.log(\"初始化useEffect 执行一次\");\r\n    }, [type, id]);\r\n\r\n    function changeType() {\r\n        if (type === 1) {\r\n            setType(2)\r\n        }\r\n        if (type === 2) {\r\n            setType(1)\r\n        }\r\n    }\r\n\r\n    function changeId() {\r\n        if (id === '008') {\r\n            setId('009')\r\n        }\r\n        if (id === '009') {\r\n            setId('008')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>pageA</div>\r\n            <Link to={`/toB`}>\r\n                <div className=\"addicon\">toB</div>\r\n            </Link>\r\n            <div onClick={changeType}>{type}</div>\r\n            <div onClick={changeId}>{id}</div>\r\n            <TA id={22} name='123'></TA>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default A","// import React, { useState, useEffect, useRef, useCallback, ReactText } from 'react'\r\nimport React from 'react'\r\n// import { Link, useHistory } from \"react-router-dom\";\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\nimport { Link } from \"react-router-dom\";\r\nimport Apage from '../processApp/A'\r\n\r\nlet InfoContext = React.createContext({})\r\n\r\nconst B: React.FC = () => {\r\n    let { path, params } = useRouteMatch() as any\r\n    console.log(useRouteMatch())\r\n    return (\r\n        <>\r\n            <div>pageB</div>\r\n            <Link to={`/toA`}>\r\n                <div className=\"addicon\">toA</div>\r\n            </Link>\r\n            <InfoContext.Provider value={{}}>\r\n                <Switch>\r\n                    <Route path={`${path}/${params.active}`} component={Apage}></Route>\r\n                </Switch>\r\n            </InfoContext.Provider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default B;\r\n","// import React, { useState, useEffect, useRef, useCallback, ReactText } from 'react'\r\nimport React, { useState, useEffect } from 'react'\r\n// import { Link, useHistory } from \"react-router-dom\";\r\n// import { Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nconst Midea: React.FC = () => {\r\n    const [autoPlay, setAutoPlay] = useState(false)\r\n    const [wConstraints] = useState({\r\n        audio: false,\r\n        video: { facingMode: 'user' }\r\n    })\r\n\r\n    useEffect(() => {\r\n        setAutoPlay(true)\r\n        let video = window.document.getElementById(\"video\") as any\r\n        navigator.mediaDevices.getUserMedia(wConstraints)\r\n            .then(stream => {\r\n                video.srcObject = stream\r\n            })\r\n            .catch(error => {\r\n                alert(error)\r\n                console.error(error)\r\n            })\r\n    }, [wConstraints])\r\n\r\n    useEffect(() => {\r\n        // setWConstraints({ audio: false, video: { facingMode: 'environment' } })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <video id=\"video\" width=\"100%\" height=\"100%\" autoPlay={autoPlay}></video>\r\n            <canvas id=\"canvas\" width=\"100%\" height=\"100%\"></canvas>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Midea;","// 兼容es5，默认情况不开启\nimport 'core-js/es/index';\n// React React-Router React-Redux 核心组件\nimport React, { useEffect, useState } from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n// 模块按需加载\nimport Apgae from './page/qy/processApp/A';\nimport Bpgae from './page/qy/noticApp/B';\nimport Midea from './page/wx/Midea';\n\n// 全局模块\n// import Loading from './page/loading'\n\n// 图片引入样例\nimport logo from \"./logo.svg\";\n// css应用样例\nimport \"./App.css\";\n\nfunction App() {\n  const [userId, setUserId] = useState(0);\n  useEffect(() => {\n    console.log(\"useEffect 执行一次\");\n    console.log(logo);\n    console.log(userId);\n    setUserId(0);\n  }, [userId]);\n  return (\n    <Provider store={store}>\n      {/* <Loading></Loading> */}\n      {/* BrowserRouter, HashRouter 两种不同路由模式*/}\n      <BrowserRouter>\n        <Switch>\n          {/* Route exact 路由完全匹配渲染*/}\n          <Route path=\"/\" component={Midea} exact></Route>\n          <Route path=\"/toA/:id\" component={Apgae}></Route>\n          <Route path=\"/toB/:active\" component={Bpgae}></Route>\n          <Route path=\"/midea\" component={Midea}></Route>\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}